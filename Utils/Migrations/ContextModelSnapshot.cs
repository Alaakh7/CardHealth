// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Utils.Models;

#nullable disable

namespace Utils.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Utils.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Utils.Models.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnalysisType")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Analysiss");
                });

            modelBuilder.Entity("Utils.Models.AnalysisInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealingPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("HealingPointId");

                    b.ToTable("AnalysisInfos");
                });

            modelBuilder.Entity("Utils.Models.AnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealingPointId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserBasicInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealingPointId");

                    b.HasIndex("UserBasicInfoId");

                    b.ToTable("AnalysisResults");
                });

            modelBuilder.Entity("Utils.Models.AnalysisResultFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnalysisResultId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisResultId");

                    b.ToTable("AnalysisResultFiles");
                });

            modelBuilder.Entity("Utils.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("Utils.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Utils.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Utils.Models.HealingPoint", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("HealingPointType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("HealingPoints");
                });

            modelBuilder.Entity("Utils.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElseMedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElseMedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Utils.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("HealingPointId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealingPointId");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Utils.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TherapeuticStageId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TherapeuticStageId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Utils.Models.Sensitive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sensitives");
                });

            modelBuilder.Entity("Utils.Models.TherapeuticStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("HealingPointId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("HealingPointId");

                    b.HasIndex("UserId");

                    b.ToTable("TherapeuticStage");
                });

            modelBuilder.Entity("Utils.Models.UserBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalNumbser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserBasicInfos");
                });

            modelBuilder.Entity("Utils.Models.UserChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("HealingPointId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChronicDiseaseId");

                    b.HasIndex("HealingPointId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChronicDiseases");
                });

            modelBuilder.Entity("Utils.Models.UserSecondaryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChiledNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMaried")
                        .HasColumnType("bit");

                    b.Property<string>("JobDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MariedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userBasicInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userBasicInfoId");

                    b.ToTable("UserSecondaryInfos");
                });

            modelBuilder.Entity("Utils.Models.UserSensitive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealingPointId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensitiveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealingPointId");

                    b.HasIndex("SensitiveId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSensitives");
                });

            modelBuilder.Entity("Utils.Models.AnalysisInfo", b =>
                {
                    b.HasOne("Utils.Models.Analysis", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany("AnalysisInfos")
                        .HasForeignKey("HealingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("HealingPoint");
                });

            modelBuilder.Entity("Utils.Models.AnalysisResult", b =>
                {
                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany()
                        .HasForeignKey("HealingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.UserBasicInfo", "UserBasicInfo")
                        .WithMany()
                        .HasForeignKey("UserBasicInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealingPoint");

                    b.Navigation("UserBasicInfo");
                });

            modelBuilder.Entity("Utils.Models.AnalysisResultFile", b =>
                {
                    b.HasOne("Utils.Models.AnalysisResult", "AnalysisResult")
                        .WithMany("AnalysisResultFiles")
                        .HasForeignKey("AnalysisResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnalysisResult");
                });

            modelBuilder.Entity("Utils.Models.HealingPoint", b =>
                {
                    b.HasOne("Utils.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Utils.Models.Medicine", b =>
                {
                    b.HasOne("Utils.Models.Medicine", "ElseMedicine")
                        .WithMany()
                        .HasForeignKey("ElseMedicineId");

                    b.Navigation("ElseMedicine");
                });

            modelBuilder.Entity("Utils.Models.PhoneNumber", b =>
                {
                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("HealingPointId");

                    b.HasOne("Utils.Models.UserBasicInfo", "User")
                        .WithMany("phoneNumbers")
                        .HasForeignKey("UserId");

                    b.Navigation("HealingPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utils.Models.Prescription", b =>
                {
                    b.HasOne("Utils.Models.Analysis", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisId");

                    b.HasOne("Utils.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("Utils.Models.TherapeuticStage", "TherapeuticStage")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TherapeuticStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Medicine");

                    b.Navigation("TherapeuticStage");
                });

            modelBuilder.Entity("Utils.Models.TherapeuticStage", b =>
                {
                    b.HasOne("Utils.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany("TherapeuticStages")
                        .HasForeignKey("HealingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.UserBasicInfo", "User")
                        .WithMany("TherapeuticStages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("HealingPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utils.Models.UserChronicDisease", b =>
                {
                    b.HasOne("Utils.Models.ChronicDisease", "ChronicDisease")
                        .WithMany()
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany("UserChronicDiseases")
                        .HasForeignKey("HealingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.UserBasicInfo", "User")
                        .WithMany("UserChronicDiseases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("HealingPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utils.Models.UserSecondaryInfo", b =>
                {
                    b.HasOne("Utils.Models.UserBasicInfo", "userBasicInfo")
                        .WithMany()
                        .HasForeignKey("userBasicInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("userBasicInfo");
                });

            modelBuilder.Entity("Utils.Models.UserSensitive", b =>
                {
                    b.HasOne("Utils.Models.HealingPoint", "HealingPoint")
                        .WithMany("UserSensitives")
                        .HasForeignKey("HealingPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.Sensitive", "Sensitive")
                        .WithMany()
                        .HasForeignKey("SensitiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Utils.Models.UserBasicInfo", "User")
                        .WithMany("UserSensitives")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HealingPoint");

                    b.Navigation("Sensitive");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Utils.Models.AnalysisResult", b =>
                {
                    b.Navigation("AnalysisResultFiles");
                });

            modelBuilder.Entity("Utils.Models.HealingPoint", b =>
                {
                    b.Navigation("AnalysisInfos");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("TherapeuticStages");

                    b.Navigation("UserChronicDiseases");

                    b.Navigation("UserSensitives");
                });

            modelBuilder.Entity("Utils.Models.TherapeuticStage", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Utils.Models.UserBasicInfo", b =>
                {
                    b.Navigation("TherapeuticStages");

                    b.Navigation("UserChronicDiseases");

                    b.Navigation("UserSensitives");

                    b.Navigation("phoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
